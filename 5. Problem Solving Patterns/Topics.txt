Objective:
- Master common problem-solving patterns.

Patterns are programming mechanisms / blueprints that guide you in writing code to solve algorithm problems. 

1. Frequency Counter
- This pattern uses objects / sets to collect values / frequencies of values. 
- Can often avoid the need for nested loops or O(n^2) operations with arrays / strings. 

- Frequency counter objects (dict) break down the content of an array / string in terms of the frequency of the values in the array / string. 
- Allows you to compare the content of multiple arrays / strings in O(n) time.


2. Multiple Pointers
- Creating pointers or values that correspond to an index or position in an array / string and move towards the beginning, end or middle based on a certain condition.
- Reduces the time complexity.
- Very efficient for solving problems with minimal space complexity.

Steps:
- Start with 2 pointers at any 2 positions in the sorted array. 
- Evaluate the condition using the variables at each pointer. 
- If not satisfied, move one pointer in the 'direction' that would help satisfy the condition
- Repeat until condition is satisfied or array items are exhausted.


3. Sliding Window
- Create a window which can either be an array or number from one position to another.
- Depending on a certain condition, the window either increases or closes (and a new window is created). 
- Useful for keeping track of a continous subset of data in an array / string. 
- Reduces time complexity when using nested loops from O(n^2) to O(n).

4. Divide and Conquer

5. Dynamic Programming

6. Greedy Algorithm

7. Backtracking

